#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'legoBlocks' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER m
#

def legoBlocks(n, m):
    MOD = 10**9 + 7

    # Initialize a 2D array to store the number of ways to build the wall
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # Base case: there is only one way to build a wall of height 0
    for j in range(m + 1):
        dp[0][j] = 1

    # Calculate the number of ways for each height and width
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            for k in range(1, 5):
                if j >= k:
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - k]) % MOD

    return dp[n][m]


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        m = int(first_multiple_input[1])

        result = legoBlocks(n, m)

        fptr.write(str(result) + '\n')

    fptr.close()
